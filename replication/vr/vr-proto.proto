syntax = "proto2";

import "common/request.proto";

package dsnet.vr.proto;

message ReplyMessage {
    required uint64 view = 1;
    required uint64 opnum = 2;
    required bytes reply = 3;
    required uint64 clientreqid = 4;
}

message UnloggedReplyMessage {
    required bytes reply = 1;
}

message ToClientMessage {
    oneof msg {
        ReplyMessage reply = 1;
        UnloggedReplyMessage unlogged_reply = 2;
    }
}

message RequestMessage {
    required dsnet.Request req = 1;
}

message UnloggedRequestMessage {
    required dsnet.UnloggedRequest req = 1;
}

message PrepareMessage {
    required uint64 view = 1;
    required uint64 opnum = 2;
    required uint64 batchstart = 3;
    repeated Request request = 4;
}

message PrepareOKMessage {
    required uint64 view = 1;
    required uint64 opnum = 2;
    required uint32 replicaIdx = 3;
}

message CommitMessage {
    required uint64 view = 1;
    required uint64 opnum = 2;
}

message RequestStateTransferMessage {
    required uint64 view = 1;
    required uint64 opnum = 2;
}

message StateTransferMessage {
    required uint64 view = 1;
    required uint64 opnum = 2;
    repeated dsnet.MsgLogEntry entries = 3;
}

message StartViewChangeMessage {
    required uint64 view = 1;
    required uint32 replicaIdx = 2;
    required uint64 lastCommitted = 3;
}

message DoViewChangeMessage {
    required uint64 view = 1;
    required uint64 lastNormalView = 2;
    required uint64 lastOp = 3;
    required uint64 lastCommitted = 4;
    repeated dsnet.MsgLogEntry entries = 5;
    required uint32 replicaIdx = 6;
}

message StartViewMessage {
    required uint64 view = 1;
    required uint64 lastOp = 2;
    required uint64 lastCommitted = 3;
    repeated dsnet.MsgLogEntry entries = 4;
}

message RecoveryMessage {
    required uint32 replicaIdx = 1;
    required uint64 nonce = 2;
}

message RecoveryResponseMessage {
    required uint64 view = 1;
    required uint64 nonce = 2;
    repeated dsnet.MsgLogEntry entries = 3;
    optional uint64 lastOp = 4;
    optional uint64 lastCommitted = 5;
    required uint32 replicaIdx = 6;
}

message ToReplicaMessage {
    oneof msg {
        RequestMessage request = 1;
        UnloggedRequestMessage unlogged_request = 2;
        PrepareMessage prepare = 3;
        PrepareOKMessage prepare_ok = 4;
        CommitMessage commit = 5;
        RequestStateTransferMessage request_state_transfer = 6;
        StateTransferMessage state_transfer = 7;
        StartViewChangeMessage start_view_change = 8;
        DoViewChangeMessage do_view_change = 9;
        StartViewMessage start_view = 10;
        RecoveryMessage recovery = 11;
        RecoveryResponseMessage recovery_response = 12;
    }
}
