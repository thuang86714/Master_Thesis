syntax = "proto2";

import "common/request.proto";

package dsnet.spec.proto;

message SpeculativeReplyMessage {
    required uint64 clientreqid = 1;
    required uint32 replicaidx = 2;
    required uint64 view = 3;
    required uint64 opnum = 4;
    required bytes loghash = 5;
    required bytes reply = 6;
    required bool committed = 7;
}

message UnloggedReplyMessage {
    required bytes reply = 1;
}

message ToClientMessage {
    oneof msg {
        SpeculativeReplyMessage reply = 1;
        UnloggedReplyMessage unlogged_reply = 2;
    }
}

message RequestMessage {
    required dsnet.Request req = 1;
}

message UnloggedRequestMessage {
    required dsnet.UnloggedRequest req = 1;
}

message SyncMessage {
    required uint64 view = 1;
    optional uint64 lastCommitted = 2;
    optional bytes lastCommittedHash = 3;
    optional uint64 lastSpeculative = 4;
}

message SyncReplyMessage {
    required uint64 view = 1;
    required uint64 lastSpeculative = 2;
    required bytes lastSpeculativeHash = 3;
    required uint32 replicaidx = 4;
}

// This is from a client to server.
message RequestViewChangeMessage {
    // Note that this is the view the client saw an operation fail in,
    // not the desired new view. (It's not really the client's place
    // to specify what the new view should be!)
    required uint64 view = 1;
}

message StartViewChangeMessage {
    required uint64 view = 1;
    required uint32 replicaIdx = 2;
    required uint64 lastCommitted = 3;
}

message DoViewChangeMessage {
    required uint64 view = 1;
    required uint64 lastNormalView = 2;
    required uint64 lastSpeculative = 3;
    required uint64 lastCommitted = 4;
    repeated dsnet.MsgLogEntry entries = 5;
    required uint32 replicaIdx = 6;
}

message StartViewMessage {
    required uint64 view = 1;
    required uint64 lastSpeculative = 2;
    required uint64 lastCommitted = 3;
    repeated dsnet.MsgLogEntry entries = 4;
}

message InViewMessage {
    required uint64 view = 1;
    required uint64 lastSpeculative = 2;
    required uint32 replicaIdx = 3;
}

message FillLogGapMessage {
    required uint64 view = 1;
    required uint64 lastCommitted = 2;
}

message FillDVCGapMessage {
    required uint64 view = 1;
    required uint64 lastCommitted = 2;
}

message ToReplicaMessage {
    oneof msg {
        RequestMessage request = 1;
        UnloggedRequestMessage unlogged_request = 2;
        SyncMessage sync = 3;
        SyncReplyMessage sync_reply = 4;
        RequestViewChangeMessage request_view_change = 5;
        StartViewChangeMessage start_view_change = 6;
        DoViewChangeMessage do_view_change = 7;
        StartViewMessage start_view = 8;
        InViewMessage in_view = 9;
        FillLogGapMessage fill_log_gap = 10;
        FillDVCGapMessage fill_dvc_gap = 11;
    }
}
